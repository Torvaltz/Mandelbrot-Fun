import numpy
import matplotlib.pyplot as plot
from numba import autojit


#================================================================================================================
#   Notes:
#   Larger Values for 'rows' and 'columns' will produce a higher quality image.
#   I've only been able to generate an 8000 x 8000 image on my computer, however.
#   
#   'seed' is actually the max iteration value. Image results vary based off 'seed'.
#=================================================================================================================

rows = 2000
columns = 2000
seed = 343


#================================================================================================================
#   compute_Mendelbrot
#   This function calculates the values to draw the classic Mandelbrot image.
#
#   Arguments 'real', 'imag', and 'maxIter' represent the (real, imag) coordinates and the max-iteration 
#   value for the Mendelbrot Set formula.
#================================================================================================================
@autojit
def compute_Mandelbrot(real, imag, maxIter):
    z_0 = complex(real, imag)
    z = 0.0j

    for i in range(max_iter):
        z = z*z + z_0

        if (z.real ** 2 + z.imag ** 2) > 4:
            return i
    
    return maxIter


#================================================================================================================
#   compute_BurningShip
#   This function calculates the values to draw the Burning Ship image.
#
#   Arguments 'real', 'imag', and 'maxIter' represent the (real, imag) coordinates and the max-iteration 
#   value for the Burning Ship formula.
#================================================================================================================
def compute_BurningShip(real, imag, maxIter):
    z_0 = complex(real, imag)
    z = 0.0j

    for i in range(maxIter):
        z = complex(abs(z.real ** 2 - z.imag ** 2) + z_0.real, abs(2 * z.real * z.imag) + z_0.imag)
        
        if (abs(z.real) ** 2 + abs(z.imag) ** 2) < 4:
            return i

    return maxIter



#================================================================================================================
#   draw_Mendelbrot:
#   Draws/generates the Mendelbrot Ship image. Calls the 'compute_Mendelbrot' function.
#
#   Arguments 'rows' and 'columns' are for the dimensions of the image that is generated by the MatPlotLib module.
#
#================================================================================================================
def draw_Mandelbrot(rows, columns):

    image = numpy.zeros([rows, columns])

    for row_index, real in enumerate(numpy.linspace(-2,1.5, num = rows)):
        for column_index, imag in enumerate(numpy.linspace(-1.5, 1.5, num = columns)):
            result[row_index, column_index] = numpy.log(compute_Mandelbrot(real, imag, seed))

    plot.figure(dpi=100)
    plot.imshow(result.T, cmap='seismic', interpolation='gaussian', extent=[-2,1.5, -1.5, 1.5])

    plot.show()


#===============================================================================================================
#   draw_BurningShip:
#   Draws/generates the actual Burning Ship image. Calls the 'compute_BurningShip' function.
#
#   Arguments 'rows'and 'columns' are for the dimensions of the image that is generated by the MatPlotLib module.
#
#===============================================================================================================
def draw_BurningShip(rows, columns):
    
    image = numpy.zeros([rows, columns])

    for row_index, real in enumerate(numpy.linspace(-2, 1, num = rows)):
        for column_index, imag in enumerate(numpy.linspace(-3, 0.5, num = columns)):
            image[row_index, column_index] = numpy.log(compute_BurningShip(real, imag, seed))

    plot.figure(dpi = 100)
    plot.imshow(image, cmap = 'seismic', interpolation = 'gaussian', extent = [-2, 1, -3, 0.5])

    plot.show()
